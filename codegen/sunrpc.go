// Code generated by goyacc -o sunrpc.go -p yy -v /dev/null sunrpc.y. DO NOT EDIT.

//line sunrpc.y:5

// Generated by goyacc. DO NOT EDIT.

package codegen

import __yyfmt__ "fmt"

//line sunrpc.y:8
//line sunrpc.y:13
type yySymType struct {
	yys int
	val string
}

const BOOL = 57346
const CASE = 57347
const CONST = 57348
const DEFAULT = 57349
const DOUBLE = 57350
const ENUM = 57351
const FLOAT = 57352
const OPAQUE = 57353
const STRING = 57354
const STRUCT = 57355
const SWITCH = 57356
const TYPEDEF = 57357
const UNION = 57358
const UNSIGNED = 57359
const VOID = 57360
const HYPER = 57361
const INT = 57362
const SHORT = 57363
const CHAR = 57364
const IDENTIFIER = 57365
const CONSTANT = 57366
const ERROR = 57367
const PROGRAM = 57368
const VERSION = 57369
const METADATACOMMENT = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BOOL",
	"CASE",
	"CONST",
	"DEFAULT",
	"DOUBLE",
	"ENUM",
	"FLOAT",
	"OPAQUE",
	"STRING",
	"STRUCT",
	"SWITCH",
	"TYPEDEF",
	"UNION",
	"UNSIGNED",
	"VOID",
	"HYPER",
	"INT",
	"SHORT",
	"CHAR",
	"IDENTIFIER",
	"CONSTANT",
	"ERROR",
	"PROGRAM",
	"VERSION",
	"METADATACOMMENT",
	"';'",
	"'{'",
	"'}'",
	"','",
	"'='",
	"'['",
	"']'",
	"'<'",
	"'>'",
	"'*'",
	"'('",
	"')'",
	"':'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sunrpc.y:232

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 167

var yyAct = [...]int{

	87, 37, 80, 116, 108, 63, 69, 32, 79, 58,
	56, 134, 126, 133, 105, 38, 122, 88, 89, 81,
	65, 103, 102, 76, 31, 77, 135, 115, 120, 98,
	73, 93, 42, 90, 74, 64, 41, 10, 40, 44,
	43, 13, 30, 123, 14, 39, 36, 49, 50, 51,
	52, 48, 112, 94, 82, 66, 72, 111, 114, 100,
	55, 53, 29, 138, 132, 11, 124, 113, 10, 75,
	78, 95, 13, 83, 12, 14, 60, 91, 92, 16,
	65, 59, 71, 97, 86, 15, 88, 89, 85, 96,
	99, 101, 49, 50, 51, 52, 2, 61, 62, 107,
	60, 27, 110, 106, 104, 25, 23, 20, 18, 68,
	47, 8, 118, 28, 119, 110, 109, 84, 121, 125,
	70, 127, 26, 130, 128, 117, 42, 8, 129, 131,
	41, 10, 40, 44, 43, 13, 137, 136, 14, 39,
	54, 49, 50, 51, 52, 48, 46, 7, 45, 4,
	24, 67, 22, 35, 34, 33, 21, 19, 57, 17,
	9, 6, 5, 7, 3, 4, 1,
}
var yyPact = [...]int{

	59, -1000, -1000, 50, -1000, -1000, -1000, -1000, -1000, -1000,
	85, 84, -1000, 83, 82, 78, 59, 32, -1000, 9,
	-1000, 28, 31, -1000, -1000, -1000, 30, -1000, -1000, 53,
	74, -1000, -1000, -1000, -1000, -1000, -1000, -3, -1000, 73,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 95, 55, 25, -2, 1, 77,
	-1000, -1000, -1000, -11, 57, -1000, -1000, 28, -20, 23,
	44, 65, -1000, 53, 63, 0, 63, -6, -1000, 22,
	42, 122, -4, 55, 29, -1000, -1000, -1000, -1000, -1000,
	63, -13, -16, -1000, -1000, 28, -26, 57, 63, -1000,
	122, -1000, -1000, -1000, -1000, 27, -1000, -1000, 21, 38,
	4, 107, -5, 122, -23, -1000, 12, 37, 63, -29,
	63, -1000, 122, -1000, 107, -1000, 28, 35, -27, -1000,
	-30, -1000, -1000, -7, 28, 63, -1000, 34, -1000,
}
var yyPgo = [...]int{

	0, 166, 96, 0, 164, 148, 162, 161, 146, 110,
	160, 159, 10, 158, 9, 157, 156, 2, 7, 155,
	154, 153, 1, 5, 15, 152, 151, 8, 150, 140,
	3, 125, 123, 122, 6, 120, 117, 4, 116, 58,
}
var yyR1 = [...]int{

	0, 1, 3, 3, 2, 2, 4, 4, 4, 4,
	4, 4, 5, 12, 12, 13, 13, 13, 11, 14,
	6, 6, 15, 16, 7, 17, 17, 17, 17, 17,
	18, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 24, 24, 24, 24, 23, 19, 20, 20,
	21, 26, 8, 25, 27, 27, 29, 9, 28, 30,
	30, 32, 31, 31, 10, 33, 34, 34, 35, 36,
	37, 37, 38, 39,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 5, 1, 3, 1, 4, 3, 1, 1,
	4, 4, 1, 0, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 5, 5, 4,
	3, 0, 6, 1, 2, 3, 0, 10, 1, 2,
	3, 0, 5, 3, 7, 1, 2, 3, 8, 1,
	2, 3, 8, 1,
}
var yyChk = [...]int{

	-1000, -1, -2, -4, -5, -6, -7, -8, -9, -10,
	9, 6, 15, 13, 16, 26, 29, -11, 23, -15,
	23, -16, -25, 23, -28, 23, -33, 23, -2, 30,
	33, -17, -18, -19, -20, -21, 18, -22, -24, 17,
	10, 8, 4, 12, 11, -5, -8, -9, 23, 19,
	20, 21, 22, 30, -29, 30, -12, -13, -14, 28,
	23, 23, 24, -23, 38, 23, -24, -26, 14, -34,
	-35, 27, 31, 32, 33, -14, 34, 36, -23, -27,
	-17, 39, 31, 29, -36, 23, -12, -3, 23, 24,
	33, -3, -3, 37, 31, 29, -18, -22, 33, -34,
	30, -3, 35, 37, -27, 40, -23, -3, -37, -38,
	-22, 30, 31, 29, -39, 23, -30, -31, 5, 7,
	33, -37, 39, 31, 29, -3, 41, -3, -22, -30,
	-32, -17, 29, 40, 41, 33, -17, -3, 29,
}
var yyDef = [...]int{

	0, -2, 1, 0, 6, 7, 8, 9, 10, 11,
	0, 0, 23, 0, 0, 0, 4, 0, 18, 0,
	22, 0, 0, 53, 56, 58, 0, 65, 5, 0,
	0, 24, 25, 26, 27, 28, 29, 0, 31, 0,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 51, 0, 0, 0, 13, 15, 0,
	19, 20, 21, 30, 0, 46, 32, 0, 0, 0,
	0, 0, 12, 0, 0, 0, 0, 0, 50, 0,
	0, 0, 0, 66, 0, 69, 14, 17, 2, 3,
	0, 0, 0, 49, 52, 54, 0, 0, 0, 67,
	0, 16, 47, 48, 55, 0, 30, 64, 0, 0,
	0, 0, 0, 70, 0, 73, 0, 0, 0, 0,
	0, 71, 0, 57, 59, 61, 0, 0, 0, 60,
	0, 63, 68, 0, 0, 0, 62, 0, 72,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	39, 40, 38, 3, 32, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 41, 29,
	36, 33, 37, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 34, 3, 35, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 30, 3, 31,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sunrpc.y:51
		{
			StartEnum(yyDollar[2].val)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:60
		{
			err := AddEnumAutoVal(yyDollar[1].val)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sunrpc.y:67
		{
			err := AddEnumValMeta(yyDollar[2].val, yyDollar[4].val, yyDollar[1].val)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sunrpc.y:74
		{
			err := AddEnumVal(yyDollar[1].val, yyDollar[3].val)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sunrpc.y:96
		{
			err := AddConst(yyDollar[2].val, yyDollar[4].val)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:110
		{
			StartTypedef()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sunrpc.y:122
		{
			AddDeclaration(yyDollar[2].val, yyDollar[1].val)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sunrpc.y:127
		{
			yyVAL.val = "u" + yyDollar[2].val
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:128
		{
			yyVAL.val = "float32"
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:129
		{
			yyVAL.val = "float64"
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:130
		{
			yyVAL.val = "bool"
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:131
		{
			yyVAL.val = "string"
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:132
		{
			yyVAL.val = "byte"
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:140
		{
			yyVAL.val = "int64"
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:141
		{
			yyVAL.val = "int32"
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:142
		{
			yyVAL.val = "int16"
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sunrpc.y:143
		{
			yyVAL.val = "int8"
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sunrpc.y:151
		{
			AddFixedArray(yyDollar[2].val, yyDollar[1].val, yyDollar[4].val)
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sunrpc.y:155
		{
			AddVariableArray(yyDollar[2].val, yyDollar[1].val, yyDollar[4].val)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sunrpc.y:156
		{
			AddVariableArray(yyDollar[2].val, yyDollar[1].val, "")
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sunrpc.y:164
		{
			AddOptValue(yyDollar[3].val, yyDollar[1].val)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sunrpc.y:168
		{
			StartStruct(yyDollar[2].val)
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sunrpc.y:168
		{
			AddStruct()
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sunrpc.y:181
		{
			StartUnion(yyDollar[2].val)
		}
	case 57:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sunrpc.y:181
		{
			AddUnion()
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sunrpc.y:194
		{
			StartCase(yyDollar[2].val)
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sunrpc.y:194
		{
			AddCase()
		}
	}
	goto yystack /* stack new state and value */
}
